<div style="display:none;">
  <div id="relief_design_box">
    <div style="padding-top:10px;"><b><u>1) Design Basis</u></b></div>
    <table id="relief_design_basis" style="width:85%">
      <tr>
				<th colspan="2">Sizing Basis</th>
				<th colspan="2">Minimum Temperature</th>
				<th colspan="2">Maximum Temperature</th>
      </tr>
      <tr>
        <td>Scenario</td>
        <td><%= @sizbasis_design_scenario.scenario rescue '' %></td>
        <td>Scenario</td>
        <td><%= @min_temp_design_scenario.scenario rescue '' %></td>
        <td>Scenario</td>
        <td><%= @max_temp_design_scenario.scenario rescue '' %></td>
      </tr>
      <tr>
        <td>Identifier</td>
        <td><%= @sizbasis_design_scenario.identifier rescue '' %>&Prime; Gate Valve</td>
        <td>Identifier</td>
        <td><%= @min_temp_design_scenario.identifier rescue '' %>&Prime; Gate Valve</td>
        <td>Identifier</td>
        <td><%= @max_temp_design_scenario.identifier rescue '' %>&Prime; Gate Valve</td>
      </tr>
      <tr>
        <td>Required Area</td>
        <td><%= @sizbasis_design_scenario.required_orifice rescue '' %>&nbsp;&nbsp;&nbsp;<span class="area_orifice_unit"></span></td>
        <td>Temperature</td>
        <td><%= if @min_temp_design_scenario then @discharge_min_temp rescue ''end  %>&nbsp;&nbsp;&nbsp;<span class="temperature_general_unit"></span></td>
        <td>Temperature</td>
        <td><%= if @max_temp_design_scenario then @relief_max_temp rescue '' end %>&nbsp;&nbsp;&nbsp;<span class="temperature_general_unit"></span></td>
      </tr>
      <tr>
        <td>System Design Pressure</td>
        <td>
					<%= f.text_field :prv_system_design_pressure, :style => "width:50px;" %>&nbsp;&nbsp;
					<span class="pressure_general_unit"></span>&nbsp;&nbsp;&nbsp;
					<a href="#" class="set_pressure_link">Set Pressure</a>
				</td>
        <td>System Min Design Temperature</td>
        <td><%= f.text_field :system_min_design_temp, :style => "width:50px;", :id => "system_min_design_temp" %>&nbsp;&nbsp;&nbsp;<span class="temperature_general_unit"></span></td>
        <td>System Max Design Temperature</td>
        <td><%= f.text_field :system_max_design_temp, :style => "width:50px;", :id => "system_max_design_temp" %>&nbsp;&nbsp;&nbsp;<span class="temperature_general_unit"></span></td>
      </tr>
    </table>
    <br>
    <div style="padding-top:10px;padding-bottom:10px;"> <b><u>2) Valve Type Selection Basis</u></b></div>
    <div><input type="hidden" value="Test">
      <span style="float:left;margin-right:40px;"> Location Characterization&nbsp;&nbsp;<%= f.select :discharge_location,options_for_select(StaticData.discharge_location,@relief_device_sizing.discharge_location),:class => 'discharge_location'%></span>
      <span style="float:left;margin-right:40px;"> Discharge Pressure&nbsp;&nbsp;<%= f.text_field :discharge_pressure , :style => "width:50px;"%>&nbsp;&nbsp;<span class="pressure_general_unit"></span></span>
      <span style="float:left;margin-right:40px;"> Flange Type&nbsp;&nbsp; <%= f.select :pressure_relief_flange_type,options_for_select(StaticData.flange_type,@relief_device_sizing.pressure_relief_flange_type) %></span>
      <span style="float:left;margin-right:40px;"><input type="button" id="pressure_relief_design_button" value="Design"></span>
    </div>
    <div><br><br><br><a href="#" id="add_relief_devices">Add Relief Device</a><br></div>
    <table style="width:97%" id="relief_devices_table">
      <tr>
        <th>No.</th>
        <th>PSV Tag</th>
        <th>Designation</th>
        <th>Orifice Area</th>
        <th>Set Pressure</th>
        <th>Type </th>
        <th>Sub Type </th>
        <th>Body Size</th>
        <th>Inlet Flange</th>
        <th>Outlet Flange</th>
        <th>Body Mat&#8217;l</th>
        <th>Spring Mat&#8217;l</th>
        <th>B.P.Limit</th>
        <th>Inlet Piping</th>
        <th>Outlet Piping</th>
        <th></th>
      </tr>
      <tr>
        <th colspan="3"></th>
        <th><span class="area_orifice_unit"></span></th>
        <th><span class="pressure_general_unit"></span></th>
        <th colspan="2"></th>
        <th><%= @fitting_pipe_size_unit %></th>
        <th colspan="4"></th>
        <th><span class="pressure_general_unit"></span></th>
        <th colspan="2"></th>
        <th></th>
      </tr>
      <% if @relief_device_sizing.relief_devices.empty? %>
          <% @unique_id = Time.now.to_i %>
          <% @relief_device = @relief_device_sizing.relief_devices.new %>
          <%= render :partial => 'relief_devices' %>
      <% else %>
          <% @relief_device_sizing.relief_devices.each_with_index do |relief_device| %>
              <% @unique_id = Time.now.to_i+relief_device.id %>
              <% @relief_device = relief_device %>
              <%= render :partial => 'relief_devices' %>
          <% end %>
      <% end %>
    </table>
    <label class="diff_area_orifice">*Need <label id="need_area_orifice">0</label> <span class="area_orifice_unit"></span> more</label>
    <table style="width:50%;" id="valve_piping_table">
      <tr>
        <th colspan="2">Inlet Piping</th>
        <th colspan="2">Outlet Piping</th>
      </tr>
      <tr>
        <td>Pipe Material</td><td><%= f.select :inlet_pipe_material, @pipes.collect{|p| ["#{p["material"]} - #{p["conditions"]}", p["id"]]}, :prompt => true %></td>
        <td>Pipe Material</td><td><%= f.select :circuit_pipe_material, @pipes.collect{|p| ["#{p["material"]} - #{p["conditions"]}", p["id"]]}, :prompt => true %></td>
      </tr>
      <tr>
        <td>Pipe Roughness</td><td><%= f.text_field :inlet_pipe_roughness, :class => "small-text-100" %>&nbsp;<%= @fitting_pipe_size_unit %></td>
        <td>Pipe Roughness</td><td><%= f.text_field :circuit_pipe_roughness, :class => "small-text-100" %>&nbsp;<%= @fitting_pipe_size_unit %></td>
      </tr>
    </table>
    <br>
    <div style="padding-top:10px;padding-bottom:10px;"> <b><u>3) Acceptable Location Check</u></b></div>
    <div><a href="#" id="add_location">Add Location</a><br></div>
    <table style="width:100%;border: 0;margin:0;"><tr><td style="background: #ffffff;border: 0;">
    <table style="width:99%" id="location_table">
      <tr>
        <th>No.</th>
        <th>Location</th>
        <th>Limiting Fitting</th>
        <th>Size</th>
        <th>Contact Fluid Phase</th>
        <th>Acidic Conditions</th>
        <th>High Temp. Conditions </th>
        <th>H2S Environment</th>
        <th>Acceptability</th>
        <th>Use</th>
        <th></th>
      </tr>
      <tr>
        <th colspan="3"></th>
        <th><%= @fitting_pipe_size_unit %></th>
        <th colspan="7"></th>
      </tr>
      <% if @relief_device_sizing.relief_device_locations.empty? %>
          <% @unique_id = Time.now.to_i %>
          <% @location = @relief_device_sizing.relief_device_locations.new %>
          <%= render :partial => 'locations' %>
      <% else %>
          <% @relief_device_sizing.relief_device_locations.each_with_index do |location| %>
              <% @unique_id = Time.now.to_i+location.id %>
              <% @location = location %>
              <%= render :partial => 'locations' %>
          <% end %>
      <% end %>
    </table>
    </td> <td style="background: #ffffff;border: 0;"><input type="button" id="validate_pressure_relief_btn" value="Validate"></td></tr></table>

    <br>
    <%= link_to "Add", "#", :id => "add_new_pipe_sizing" %>&nbsp;|&nbsp;<%= link_to "Close", "#", :id => "close_relief_design" %>
    &nbsp;|&nbsp;
    <%= link_to "Reset",
                reset_relief_design_admin_relief_device_sizings_path(:relief_device_sizing_id => @relief_device_sizing.id , :relief_device_type => 'pressure_relief_device'),
                 %>

  </div>
</div>




<style type="text/css">
    #relief_design_box
     {
        font: Arial,Helvetica,sans-serif;
        font-size: 12px;
    }
</style>

<script type='text/javascript'>

    //update sequence of all relief devices
    function update_sequence_relief() {
        $("td[id^='sequence_relief_device_']").each(function (index, value) {
            //sequence should not start with zero, but array starts with 0 index
            index = index + 1;
            $(this).empty().append(index);
        });
    }
    $("#add_relief_devices").click(function () {
        $.get("<%= relief_device_sizing_relief_devices_path(1)%>", function (data) {
            $("#relief_devices_table").append(data);
            update_sequence_relief();
            update_flage();
        });
			return false;
    });
    $("a.delete_relief_device").live('click', function () {
        var id = $(this).attr('id');
        if ($("td#sequence_relief_device_" + id).text() > 0) {
            $("tr#row_relief_device_" + id).hide();
            //remove id "sequence" from hidden rows
            //otherwise this interfers with sequence updater
            $("td#sequence_relief_device_" + id).attr('id', "");
            $("input#destroy_relief_device_" + id).attr('value', 1);
            update_sequence_relief();
        }
      return false;
    });

    //update sequence of all locations
    function update_sequence_location() {
        $("td[id^='sequence_rd_location_']").each(function (index, value) {
            //sequence should not start with zero, but array starts with 0 index
            index = index + 1;
            $(this).empty().append(index);
        });
    }
    $("#add_location").click(function () {
        $.get("<%= relief_device_sizing_locations_path(1)%>", function (data) {
            $("#location_table").append(data);
            update_sequence_location();
        });
      return false;
    });
    $("a.delete_location").live('click', function () {
        var id = $(this).attr('id');
        if ($("td#sequence_rd_location_" + id).text() > 0) {
            $("tr#row_relief_device_location_" + id).hide();
            //remove id "sequence" from hidden rows
            //otherwise this interfers with sequence updater
            $("td#sequence_rd_location_" + id).attr('id', "");
            $("input#destroy_relief_device_location_" + id).attr('value', 1);
            update_sequence_location();
        }
      return false;
    });

    //Relief valve design pipe inlet & outlet roughness calculation
    var pipes = <%= raw @pipes.to_json %>;
    var pipes_json = {};
    $(pipes).each(function(k, v){
        pipes_json[v.id] = v;
    });
    $('body').data('pipes', pipes_json);
    $('#relief_device_sizing_inlet_pipe_material').change(function (e) {
        if ($(this).val() == "") {
            $('#relief_device_sizing_inlet_pipe_material').val('');
            return false
        }
        $('#relief_device_sizing_inlet_pipe_roughness').val($('body').data('pipes')[$(this).val()].roughness_recommended);
    });
    $('#relief_device_sizing_circuit_pipe_material').change(function (e) {
        if ($(this).val() == "") {
            $('#relief_device_sizing_circuit_pipe_material').val('');
            return false
        }
        $('#relief_device_sizing_circuit_pipe_roughness').val($('body').data('pipes')[$(this).val()].roughness_recommended);
    });





    // close link validation
    $('#close_relief_design').click(function (e) {
        var min_pressure = 10000;
        var total_orificearea = 0;
        var location_use = 0;
        var close='true';
        //A relief device is missing a tag
        $("input[id^='psvtag_']").each(function() {
            if(this.value == ''){
                alert("A relief device is missing a tag");
                close = false;
                return false
            }
        });
        //The lowest set pressure in the relief device table does not exceed the System Design Pressure value
        $("input[id^='relief_pressure_']").each(function() {
            //add only if the value is number
            if(!isNaN(this.value) && this.value.length!=0) {
                if(min_pressure>parseFloat(this.value)) {
                    min_pressure=parseFloat(this.value);
                }
            }
        });
        if(($("#relief_device_sizing_prv_system_design_pressure").val() < min_pressure) && (min_pressure!=10000) ){
            alert("Relief device pressure exceeded the System Design Pressure value");
            close = false;
            return false
        }
        //The total Orifice Area selected is not less than the Required Area of the Design Basis
        $("input[id^='orificearea_']").each(function() {
            //add only if the value is number
            if(!isNaN(this.value) && this.value.length!=0) {
                total_orificearea= total_orificearea + parseFloat(this.value);
            }
        });
        if(total_orificearea < parseFloat(<%= @sizbasis_design_scenario.required_orifice rescue 0 %>)){
            alert("The total Orifice Area selected is not greater than the Required Area of the Design Basis");
            close = false;
            $("#need_area_orifice").empty().append(parseFloat(<%= @sizbasis_design_scenario.required_orifice rescue 0 %>)-total_orificearea);
            $(".diff_area_orifice").attr("style", "color:red");
            return false
        } else {
            $("#need_area_orifice").empty().append(0);
        }
        //The total Orifice Area selected is not less than the Required Area of the Design Basis
        $("input[id^='location_use_']").each(function() {
            //add only if the value is number
            if(this.checked) {
                location_use =1;
                // The location tag for the selected location must be provided
                var id = $(this).attr("id").slice(13);
                if($("#location_" + id).val() == ''){
                    alert("The location tag for the selected location must be provided");
                    close = false;
                    return false
                }
            }
        });
        if(location_use == 0){
            alert("A location has to be select");
            close = false;
            return false
        }

        if(close == 'true'){
            $.colorbox.close();
            return false
        }
    });



    //Pressure Relief Valve Designation change
    $(".pressure_valve_designation").live("change", function () {
        var system_equivalent_length_unit = "<%= @user_project_settings.project.unit("Area", "Orifice") %>";
        if (form_saved()) {
            var type = $(this).val();
            var id = $(this).attr("id").slice(12);
            var project_id = "<%= @user_project_settings.project.id %>";
            $.ajax({
                url:"/admin/relief_device_sizings/" + relief_device_id + "/relief_valve_orificearea",
                type:"GET",
                dataType:"json",
                data:{"designation":type},
                success:function (data) {
                    //$("#orificearea_" + id).val(data.orifice_area);
                    if (system_equivalent_length_unit == 'in²') {
                        $("#orificearea_" + id).val(data.orifice_area);
                    } else {
                        $.get('/admin/projects/'+project_id+'/convert_and_round',
                                {mtype:'Area',subtype:'Orifice',value:data.orifice_area},
                                function(data){
                                    $("#orificearea_" + id).val(data.converted_value);
                                },'json')
                    }
                }
            });
        }
    });

    $('#relief_device_sizing_pressure_relief_flange_type').change(function () {
        $('.relief_device_inletflange').val($(this).val());
        $('.relief_device_outletflange').val($(this).val());
        return false;
    });

    //4. Any new Pressure Relief Valve should show the flange value for the Inlet and Outlet Flange
    function update_flage() {
      var id=0;
      $("td[id^='sequence_relief_device_']").each(function() {
        id = $(this).attr("id").slice(23);
      });
      $('#relief_device_inletflange_' + id).val($('#relief_device_sizing_pressure_relief_flange_type').val());
      $('#relief_device_outletflange_' + id).val($('#relief_device_sizing_pressure_relief_flange_type').val());
    }


    $("#pressure_relief_design_button").click(function () {
      if (form_saved()) {
        $.ajax({
          url:"cal_pressure_relief",
          type:"GET",
          dataType:"json",
          data:{},
          success:function (data) {
            window.location.reload()
          }
        });
      }
    });

    $("#validate_pressure_relief_btn").click(function () {
      if (form_saved()) {
        $.ajax({
          url:"validate_pressure_relief",
          type:"GET",
          dataType:"json",
          data:{},
          success:function (data) {
          }
        });
      }
    });



</script>